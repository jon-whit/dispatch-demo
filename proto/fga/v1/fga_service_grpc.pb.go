// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: fga/v1/fga_service.proto

package fgav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FGAService_Check_FullMethodName = "/fga.v1.FGAService/Check"
)

// FGAServiceClient is the client API for FGAService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FGAServiceClient interface {
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
}

type fGAServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFGAServiceClient(cc grpc.ClientConnInterface) FGAServiceClient {
	return &fGAServiceClient{cc}
}

func (c *fGAServiceClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, FGAService_Check_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FGAServiceServer is the server API for FGAService service.
// All implementations must embed UnimplementedFGAServiceServer
// for forward compatibility
type FGAServiceServer interface {
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
	mustEmbedUnimplementedFGAServiceServer()
}

// UnimplementedFGAServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFGAServiceServer struct {
}

func (UnimplementedFGAServiceServer) Check(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedFGAServiceServer) mustEmbedUnimplementedFGAServiceServer() {}

// UnsafeFGAServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FGAServiceServer will
// result in compilation errors.
type UnsafeFGAServiceServer interface {
	mustEmbedUnimplementedFGAServiceServer()
}

func RegisterFGAServiceServer(s grpc.ServiceRegistrar, srv FGAServiceServer) {
	s.RegisterService(&FGAService_ServiceDesc, srv)
}

func _FGAService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FGAServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FGAService_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FGAServiceServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FGAService_ServiceDesc is the grpc.ServiceDesc for FGAService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FGAService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fga.v1.FGAService",
	HandlerType: (*FGAServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _FGAService_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fga/v1/fga_service.proto",
}
